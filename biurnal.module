<?php
// $Id$

/**
 * @file
 * Main module file
 */

//require_once('includes/biurnal.node.inc');

/**
 * Implementation of hook_perm().
 */
function biurnal_perm() {
  return array(
    'administer biurnal',
    'preview biurnal scheme',
  );
}

/**
 * Implementation of hook_autoload_info().
 */
function biurnal_autoload_info() {
  return array(
    'Biurnal' => array(
      'file' => 'includes/biurnal.classes.inc',
    ),
  );
}

/**
 * Implementation of hook_devel_block_links().
 */
function biurnal_devel_block_links() {
  return l(t('Flush biurnal cache'), 'biurnal/flush', 'Null', 'return_to='. urlencode($_GET['q']));
}

/**
 * Implementation of hook_menu().
 */
function biurnal_menu() {
  $items = array();
  $items['admin/settings/biurnal'] = array(
    'title' => 'Biurnal configuration',
    'file' => 'includes/biurnal.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biurnal_settings_form'),
    'access arguments' => array('administer biurnal'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/biurnal/settings'] = array(
    'title' => t('Settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/settings/biurnal/configurations'] = array(
    'title' => 'Configurations',
    'file' => 'includes/biurnal.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biurnal_list_configurations_form', 4),
    'access arguments' => array('administer biurnal'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/settings/biurnal/add'] = array(
    'title' => 'Add configuration',
    'file' => 'includes/biurnal.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biurnal_add_configuration_form', 4),
    'access arguments' => array('administer biurnal'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/settings/biurnal/edit/%biurnal_configuration'] = array(
    'title callback' => '_biurnal_edit_form_title_callback',
    'title arguments' => array(4),
    'file' => 'includes/biurnal.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biurnal_edit_configuration_form', 4),
    'access arguments' => array('administer biurnal'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/biurnal/delete/%biurnal_configuration'] = array(
    'title callback' => '_biurnal_delete_form_title_callback',
    'title arguments' => array(4),
    'file' => 'includes/biurnal.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biurnal_delete_configuration_form', 4),
    'access arguments' => array('administer biurnal'),
    'type' => MENU_CALLBACK,
  );
  // $items['biurnal/preview/%'] = array(
  //   'title'   => 'Preview color scheme',
  //   'callback' => 'biurnal_preview_scheme',
  //   'access arguments'   => array('preview biurnal scheme'),
  //   'type'     => MENU_CALLBACK,
  // );
  // $items['biurnal/flush'] = array(
  //   'title'    => 'Flush biurnal cache',
  //   'callback' => '_biurnal_flush_cache',
  //   'access'   => user_access('administer biurnal scheme'),
  //   'type'     => MENU_CALLBACK,
  // );
  // 
  // if (Biurnal::instance()->preview_scheme()) {
  //   $items['biurnal/stop_preview'] = array(
  //     'title'    => 'Stop preview of color scheme',
  //     'callback' => 'biurnal_preview_scheme',
  //     'access'   => user_access('preview biurnal scheme'),
  //     'type'     => MENU_NORMAL_ITEM,
  //   );
  // }

  return $items;
}

function _biurnal_edit_form_title_callback($configuration) {
  return $configuration->title;
}

function _biurnal_delete_form_title_callback($configuration) {
  return t('Delete @name', array('@name' => $configuration->title));
}

function biurnal_configuration_load($id) {
  $config = db_fetch_object(db_query("SELECT * FROM {biurnal_configuration} WHERE id=%d", array(
    ':id' => $id,
  )));
  if ($config) {
    $config->configuration = unserialize($config->configuration);
  }
  return $config;
}

function biurnal_preview_scheme($nid) {
  if (isset($nid)) {
    Biurnal::instance()->preview_scheme($nid);
  }
  else {
    Biurnal::instance()->stop_preview();
  }
  drupal_goto('');
}

/**
 * Implementation of hook_preprocess_page().
 *
 * @param array $vars 
 * @return void
 */
function biurnal_preprocess_page(&$vars) {
  Biurnal::instance()->preprocess($vars);
}

/**
 * Deletes all processed biurnal files.
 */
function _biurnal_flush_cache() {
  $biurnal_path = file_directory_path() .'/biurnal';

  try {
    if (_biurnal_rm_recursive($biurnal_path)) {
      drupal_set_message(t('Biurnal cache cleared'), 'status');
    }
    else {
      drupal_set_message(t('Error while clearing biurnal cache: @error', array('@error' => t("Couldn't erase directory"))), 'status');
    }
  } catch (Exception $e) {
    drupal_set_message(t('Error while clearing biurnal cache: @error', array('@error' => $e->getMessage())), 'status');
  }

  drupal_goto($_GET['return_to']);
}

/**
 * Utility function for deleting a directory and it's contents.
 *
 * @param string $filepath 
 */
function _biurnal_rm_recursive($filepath) {
  if (is_dir($filepath) && !is_link($filepath)) {
    if ($dh = opendir($filepath)) {
      while (($sf = readdir($dh)) !== FALSE) {
        if ($sf == '.' || $sf == '..') {
          continue;
        }
        if (!_biurnal_rm_recursive($filepath . '/' . $sf)) {
          throw new Exception($filepath . '/' . $sf . ' could not be deleted.');
        }
      }
      closedir($dh);
    }
    return rmdir($filepath);
  }
  return unlink($filepath);
}

/**
 * Implementation of hook_views_api().
 */
// function biurnal_views_api() {
//   return array(
//     'api' => 2.0,
//     'path' => drupal_get_path('module', 'biurnal') . '/includes',
//   );
// }
